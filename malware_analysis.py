import pefile
import networkx as nx
import matplotlib.pyplot as plt
import re
import subprocess

def analyze_malware(file_path):
    """
    Analyze a malware sample and extract relevant information.
    """
    output = subprocess.check_output(['file', file_path]).decode('utf-8')
    if 'PE32 executable' not in output:
        print(f"{file_path} is not a valid PE executable.")
        return

    pe = pefile.PE(file_path)

    api_calls = extract_api_calls(pe)
    print("API Calls:")
    for call in api_calls:
        print(call)

    registry_keys = extract_registry_keys(pe)
    print("\nRegistry Keys:")
    for key in registry_keys:
        print(key)

    file_operations = extract_file_operations(pe)
    print("\nFile Operations:")
    for operation in file_operations:
        print(operation)

def reverse_engineer(file_path):
    """
    Reverse-engineer the malware to identify its function calls, data flows, and potential entry points.
    """
    output = subprocess.check_output(['file', file_path]).decode('utf-8')
    if 'PE32 executable' not in output:
        print(f"{file_path} is not a valid PE executable.")
        return

    pe = pefile.PE(file_path)

    disassembled_code = disassemble_code(pe)
    print("Disassembled Code:")
    print(disassembled_code)

    cfg = construct_cfg(disassembled_code)
    print("\nControl Flow Graph:")
    print(cfg.nodes())
    print(cfg.edges())

    entry_points = identify_entry_points(cfg)
    print("\nPotential Entry Points:")
    for entry_point in entry_points:
        print(entry_point)

def identify_iocs(file_path):
    """
    Identify Indicators of Compromise (IOCs) within the malware sample.
    """
    pe = pefile.PE(file_path)
    strings = extract_strings(pe)
    
    ip_addresses = identify_ip_addresses(strings)
    print("\nIP Addresses:")
    for ip in ip_addresses:
        print(ip)
    
    domain_names = identify_domain_names(strings)
    print("\nDomain Names:")
    for domain in domain_names:
        print(domain)
    
    disassembled_code = disassemble_code(pe)
    code_patterns = identify_code_patterns(disassembled_code)
    print("\nCode Patterns:")
    for pattern in code_patterns:
        print(pattern)

def disassemble_code(pe):
    with open('temp_code.bin', 'wb') as temp_code_file:
        temp_code_file.write(pe.get_memory_mapped_image())
    
    disassembled_code = subprocess.check_output(['objdump', '-d', 'temp_code.bin']).decode('utf-8')
    
    subprocess.call(['rm', 'temp_code.bin'])
    
    return disassembled_code

def construct_cfg(disassembled_code):
    cfg = nx.DiGraph()
    block_start = None
    
    for line in disassembled_code.split('\n'):
        if line.startswith('0x'):
            address = int(line.split(':')[0], 16)
            if block_start is None:
                block_start = address
            else:
                cfg.add_edge(block_start, address)
                block_start = address
    
    return cfg

def identify_entry_points(cfg):
    entry_points = []
    for node in cfg.nodes():
        if cfg.in_degree(node) == 0:
            entry_points.append(node)
    return entry_points

def extract_strings(pe):
    strings = []
    for section in pe.sections:
        if section.Name.decode('utf-8').startswith('.rdata'):
            data = section.get_data()
            strings += re.findall(b"[\x20-\x7e]{4,}", data)
    return [s.decode('utf-8') for s in strings]

def identify_ip_addresses(strings):
    ip_pattern = re.compile(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}')
    return [s for s in strings if ip_pattern.match(s)]

def identify_domain_names(strings):
    domain_pattern = re.compile(r'[a-zA-Z0-9]+\.[a-zA-Z]{2,}')
    return [s for s in strings if domain_pattern.match(s)]

def identify_code_patterns(disassembled_code):
    patterns = []
    if 'XOR' in disassembled_code:
        patterns.append('XOR Encryption')
    if 'GetProcAddress' in disassembled_code:
        patterns.append('Dynamic API Resolution')
    if 'CreateThread' in disassembled_code:
        patterns.append('Multithreading')
    return patterns

# Example usage
file_path = "sample_malware.exe"
analyze_malware(file_path)
reverse_engineer(file_path)
identify_iocs(file_path)
cfg = construct_cfg(disassemble_code(pefile.PE(file_path)))
visualize_cfg(cfg)
